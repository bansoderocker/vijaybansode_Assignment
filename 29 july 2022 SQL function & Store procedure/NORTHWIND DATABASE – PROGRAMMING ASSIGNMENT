

--NORTHWIND DATABASE – PROGRAMMING ASSIGNMENT
--1. WRITE A PROCEDURE WHICH TAKES CATEGORY NAME AS A PARAMETER AND RETURN
--ALL PRODUCTS WHICH MATCH WITH THE CATEGORY NAME. IF NAME NOT EXIST PRINT MESSAGE
Alter PROC GETPRODUCTNAME_CATEGORYNAME (@CNAME VARCHAR(20))
AS 
BEGIN
	
	 DECLARE PNAMECURSOR CURSOR FOR ( SELECT P.PRODUCTNAME FROM PRODUCTS P JOIN CATEGORIES C ON P.CATEGORYID=C.CATEGORYID WHERE C.CATEGORYNAME = @CNAME )

 DECLARE @PNAME VARCHAR(30),@FETCHSTATUS INT

OPEN PNAMECURSOR
FETCH NEXT FROM PNAMECURSOR INTO @PNAME
SET @FETCHSTATUS = @@FETCH_STATUS
	IF(@FETCHSTATUS <0)
		BEGIN
		 RAISERROR ( 'NO RECORD FOUND',16,1)
 END
 WHILE @FETCHSTATUS = 0
 BEGIN

 PRINT 'Product Name : '+@Pname

 FETCH NEXT FROM PNAMECURSOR INTO @Pname
	SET @FETCHSTATUS = @@FETCH_STATUS
 END
 CLOSE PNAMECURSOR
 DEALLOCATE PNAMECURSOR
end

exec GETPRODUCTNAME_CATEGORYNAME 'Confections'
--2. TAKE COUNTRY NAME AS THE PARAMETER AND RETURN ALL CUSTOMERS FROM THAT COUNTRY
create proc CustomerNameByCountry ( @Contry Varchar(20))
as 
begin

	 DECLARE CNAMECURSOR CURSOR FOR ( select Contactname from Customers where Country = @Contry )

 DECLARE @CNAME VARCHAR(30),@FETCHSTATUS INT

OPEN CNAMECURSOR
FETCH NEXT FROM CNAMECURSOR INTO @CNAME
SET @FETCHSTATUS = @@FETCH_STATUS
	IF(@FETCHSTATUS <0)
		BEGIN
		 RAISERROR ( 'NO RECORD FOUND',16,1)
 END
 WHILE @FETCHSTATUS = 0
 BEGIN

 PRINT 'Customer Name : '+@Cname

 FETCH NEXT FROM CNAMECURSOR INTO @Cname
	SET @FETCHSTATUS = @@FETCH_STATUS
 END
 CLOSE CNAMECURSOR
 DEALLOCATE CNAMECURSOR
end

exec CustomerNameByCountry 'spain'

--3. WRITE INSERT, UPDATE AND DELETE PROCEDURE FOR EMPLOYEES TABLE. IF ANY
--STATEMENT FAIL RAISE PROPER ERROR MESSAGE
--PARAMETER :EMPLOYEEID LASTNAME FIRSTNAME TITLE TITLEOFCOURTESY BIRTHDATE HIREDATE ADDRESS CITY REGION POSTALCODE COUNTRY

select * from Employees
ALTER PROC EMPPROCEDURE 
(
@TYPE VARCHAR(10), 
@EID INT = NULL, 
@LNAME VARCHAR(20) = NULL,
@FNAME VARCHAR(20) = NULL,
@TITLE VARCHAR(30) = NULL,
@TITLEOFCOURTESY VARCHAR(30)=NULL,
@BIRTHDATE DATE=NULL,
@HIREDATE DATE=NULL,
@ADDRESS VARCHAR(100)=NULL,
@CITY VARCHAR(30)=NULL,
@REGION VARCHAR(20)=NULL,
@POSTALCODE VARCHAR(10)=NULL,
@COUNTRY VARCHAR(10)=NULL)
AS
BEGIN TRY

	IF @TYPE = 'INSERT'
	BEGIN
		INSERT INTO EMPLOYEES(LASTNAME,FIRSTNAME,TITLE,TITLEOFCOURTESY,BIRTHDATE,HIREDATE,[ADDRESS],CITY,REGION,POSTALCODE,COUNTRY)
		VALUES (@LNAME,@FNAME,@TITLE,@TITLEOFCOURTESY,@BIRTHDATE,@HIREDATE,@ADDRESS,@CITY,@REGION,@POSTALCODE,@COUNTRY)
		PRINT 'INSERT DATA SUCCESSFULLY'
	END
	ELSE IF @TYPE = 'UPDATE'
	 BEGIN
	 IF @EID IS NOT NULL
		BEGIN
				 UPDATE EMPLOYEES SET
										LASTNAME= CASE WHEN @LNAME IS NULL THEN LASTNAME ELSE @LNAME END,
										FIRSTNAME=CASE WHEN @FNAME IS NULL THEN FIRSTNAME ELSE @FNAME END ,
										TITLE = CASE WHEN @TITLE IS NULL THEN TITLE ELSE @TITLE END ,
										TITLEOFCOURTESY = CASE WHEN @TITLEOFCOURTESY IS NULL THEN TITLEOFCOURTESY ELSE @TITLEOFCOURTESY END ,
										BIRTHDATE= CASE WHEN @BIRTHDATE IS NULL THEN BIRTHDATE ELSE @BIRTHDATE END ,
										HIREDATE= CASE WHEN @HIREDATE IS NULL THEN HIREDATE ELSE @HIREDATE END ,
										[ADDRESS]= CASE WHEN @ADDRESS IS NULL THEN [ADDRESS] ELSE @ADDRESS END ,
										CITY= CASE WHEN @CITY IS NULL THEN CITY ELSE @CITY END ,
										REGION= CASE WHEN @REGION IS NULL THEN REGION ELSE @REGION END ,
										POSTALCODE=  CASE WHEN @POSTALCODE IS NULL THEN POSTALCODE ELSE @POSTALCODE END ,
										COUNTRY= CASE WHEN @COUNTRY IS NULL THEN COUNTRY ELSE @COUNTRY END 
				 WHERE EMPLOYEEID = @EID
				 IF @@ROWCOUNT>0
				 PRINT 'DATA UPDATED..'
				 ELSE
				 PRINT 'NO RECORD FOUND'
		 END
	ELSE 
	BEGIN
		RAISERROR( 'PLEASE GIVE EMPLOYEE ID TO UPDATE DATA',16,1)
		END
	END
	ELSE IF @TYPE = 'DELETE'
	BEGIN
	 IF @EID IS NOT NULL
		BEGIN
			DELETE FROM EMPLOYEES WHERE EMPLOYEEID = @EID
			 IF @@ROWCOUNT>0
				 PRINT 'DATA UPDATED..'
				 ELSE
				 PRINT 'NO RECORD FOUND'
	 END
	ELSE 
	BEGIN
		RAISERROR( 'PLEASE GIVE EMPLOYEE ID TO UPDATE DATA',16,2)
		END
	END
	ELSE
	BEGIN
	RAISERROR ( 'PLEASE ENTER PROPER INPUT',16,3)
	END


END TRY
BEGIN CATCH

		PRINT 'ERROR OCCURED : '+ERROR_MESSAGE()

END CATCH

EXEC EMPPROCEDURE @type ='insert' ,@Lname= 'Bansode',@Fname='Vijay',@TITLE = 'Developer',@TITLEOFCOURTESY = 'Mr.',@BIRTHDATE = '1996-02-21',@HIREDATE= '2022-07-30',
@ADDRESS='room no 304',@CITY='Navi mumbai',@REGION=1,@POSTALCODE='410218',@COUNTRY='IND'

Exec Empprocedure @TYPE = 'Update' ,@TITLE = 'Tester',@EID=10
Exec Empprocedure @TYPE = 'delete' , @EID=10

--4. TAKE REGIONDESCRIPTION AS A PARAMETER
--PRINT REGIONDESCRIPTION, TERRITORY DESCRIPTION, AND EMPNAME

Create proc USP_REGIONDESCRIPTION (@REGIONDESCRIPTION varchar(10))
as
begin

          DECLARE USP_REGIONDESCRIPTION_CURSOR CURSOR FOR ( select T.TerritoryDescription , E.FirstName +' '+E.LastName EMPNAME from Region R join Territories T ON R.RegionID = T.RegionID
         join EmployeeTerritories ET ON ET.TerritoryID = T.TerritoryID
         join Employees E ON E.EmployeeID = ET.EmployeeID
         WHERE R.RegionDescription = @REGIONDESCRIPTION)
		 
 DECLARE @TerritoryDescription VARCHAR(30),@FULLNAME VARCHAR(30),@FETCHSTATUS INT

OPEN USP_REGIONDESCRIPTION_CURSOR
FETCH NEXT FROM USP_REGIONDESCRIPTION_CURSOR INTO @TerritoryDescription,@FULLNAME
SET @FETCHSTATUS = @@FETCH_STATUS
	IF(@FETCHSTATUS <0)
		BEGIN
		 RAISERROR ( 'NO RECORD FOUND',16,1)
 END
 WHILE @FETCHSTATUS = 0
 BEGIN

 PRINT @REGIONDESCRIPTION+' , '+@TerritoryDescription+' , ' + @FULLNAME +CHAR(10)

 FETCH NEXT FROM USP_REGIONDESCRIPTION_CURSOR INTO @TerritoryDescription,@FULLNAME
	SET @FETCHSTATUS = @@FETCH_STATUS
 END
 CLOSE USP_REGIONDESCRIPTION_CURSOR
 DEALLOCATE USP_REGIONDESCRIPTION_CURSOR
end


EXEC USP_REGIONDESCRIPTION @REGIONDESCRIPTION ='Eastern'

--5. PRODUCTS TABLE --WRITE A PROCEDURE WHICH CHECKS UNITSINSTOCK AND UNITSONORDER
--DISPLAY ALL PRODUCTS DETAILS (PRODUCTNAME, UNITPRICE, UNITSINSTOCK,UNITSONORDER, DIFFERENCE ) where UNITSONORDER is more then UNITSINSTOCK

CREATE PROC USP_PRODUCT_CHECK_STOCK
AS 
BEGIN
SELECT PRODUCTNAME, UNITPRICE, UNITSINSTOCK,UNITSONORDER, (UNITSINSTOCK-UNITSONORDER)[DIFFERENCE] FROM PRODUCTS WHERE UnitsOnOrder>UnitsInStock
END

EXEC USP_PRODUCT_CHECK_STOCK
--6. ORDER DETAILS TABLE   --TAKE ORDERID AS PARAMETER
--FOR THE ORDERID PRINT PRODUCTNAME, UNITPRICE, QUANTITY, DISCOUNT, TOTAL I.E
--UNITPRICE * QUNATITY, DISCOUNTAMOUNT, FINAL PRICE I.E. TOTAL –DISCOUNT AMOUNT

Alter PROC USP_ORDERDETAILS_ORDERID (@ORDERID INT)
AS
BEGIN
DECLARE @PNAME VARCHAR(20),@UNITPRICE NUMERIC(9,2),@QUANTITY INT,@DISCOUNT NUMERIC(9,2),@TOTAL	NUMERIC(9,2),@DISCOUNTAMOUNT NUMERIC(9,2),@FINALPRICE NUMERIC(9,2),@FETCHSTATUS INT

 DECLARE USP_ORDERDETAILS_ORDERID_CURSOR CURSOR FOR (  SELECT  P.PRODUCTNAME, OD.UNITPRICE, OD.QUANTITY, OD.DISCOUNT, (OD.UNITPRICE*OD.QUANTITY),
   (OD.UNITPRICE*OD.QUANTITY)*OD.DISCOUNT , (OD.UNITPRICE*OD.QUANTITY) - ((OD.UNITPRICE*OD.QUANTITY)*OD.DISCOUNT)  FROM [ORDER DETAILS] OD JOIN PRODUCTS P ON OD.PRODUCTID = P.PRODUCTID
  WHERE ORDERID = @ORDERID)
		 

OPEN USP_ORDERDETAILS_ORDERID_CURSOR
FETCH NEXT FROM USP_ORDERDETAILS_ORDERID_CURSOR INTO @PNAME ,@UNITPRICE ,@QUANTITY ,@DISCOUNT ,@TOTAL	,@DISCOUNTAMOUNT ,@FINALPRICE
SET @FETCHSTATUS = @@FETCH_STATUS
	IF(@FETCHSTATUS <0)
		BEGIN
		 RAISERROR ( 'NO RECORD FOUND',16,1)
 END
 WHILE @FETCHSTATUS = 0
 BEGIN


 PRINT 'PRODCUT NAME : '+ @PNAME+CHAR(10)+'UNIT PRICE : '+ CAST(@UNITPRICE AS VARCHAR)+CHAR(10)+'QUANTITY : '+ CAST(@QUANTITY AS VARCHAR)+CHAR(10)+
 +'DISCOUNT : '+ CAST(@DISCOUNT AS VARCHAR)+CHAR(10)+
 +'TOTAL : '+ CAST(@TOTAL AS VARCHAR)+CHAR(10)+
 +'DISCOUNT AMOUNT : '+ CAST(@DISCOUNTAMOUNT AS VARCHAR)+CHAR(10)+
 +'TOTAL AMOUNT : '+ CAST(@FINALPRICE AS VARCHAR)+CHAR(10)

 FETCH NEXT FROM USP_ORDERDETAILS_ORDERID_CURSOR INTO  @PNAME ,@UNITPRICE ,@QUANTITY ,@DISCOUNT ,@TOTAL	,@DISCOUNTAMOUNT ,@FINALPRICE
	SET @FETCHSTATUS = @@FETCH_STATUS
 END
 CLOSE USP_ORDERDETAILS_ORDERID_CURSOR
 DEALLOCATE USP_ORDERDETAILS_ORDERID_CURSOR


END
 
EXEC USP_ORDERDETAILS_ORDERID 10248

--7. WRITE A PROCEDURE WHICH INSERT IN PRODUCTTABLE
--PARAMETER FOR PROCEDURE PRODUCTNAME, UNITPRICE AND CATEGORYNAME
--CHECK IF CATEGORYNAME EXIST THEN ADD PRODUCTS WITH EXISTING CATEGORYID
--IF CATEGORYNAME DOES NOT EXIST FIRST INSERT IN CATEGORY TABLE
--READ CATEGORYID WHICH IS IDENTITY FIELD
--AND INSERT NEW INSERTED ID IN PRODUCT TABLE AS CATEGORYID


Create proc AddProduct(@PName varchar(30),@Cname varchar(30),@Unitprice numeric(9,2))
as 
begin
declare @cid int , @ROWCOUNT int
begin try
select @cid = CategoryID from Categories where CategoryName = @Cname
 set @ROWCOUNT = @@ROWCOUNT
 if @ROWCOUNT>0
 begin
      insert into products (ProductName,CategoryID,UnitPrice) values (@PNAME,@cid,@UNITPRICE)
 end
 else 
 begin
		insert into Categories (CategoryName) values (@Cname)
		select @cid = CategoryID from Categories where CategoryName = @Cname
		insert into products (ProductName,CategoryID,UnitPrice) values (@PNAME,@cid,@UNITPRICE)
 end
 end try
 begin catch
				print ' Error : '+Error_number()
 end catch
end


exec AddProduct 'Green Tea Masala' , 'Beverages789' , 301.12

--8. ORDERS TABLE
--TAKE YEAR AS PARAMETER TO PROCEDURE
--PRINT IN EACH QUARTER HOW MANY ORDERS BOOKED,
--EXAMPLE IN Q-1 100
--Q-2 150 ....
--IF YEAR NOT EXIST PRINT ERROR MESSAGE

CREATE PROC USP_ORDER_QUARTER (@YEAR INT) AS 
BEGIN
DECLARE @FETCHSTATUS INT, @QUARTER INT, @ORDERCOUNT INT

 DECLARE USP_ORDER_QUARTER_CURSOR CURSOR FOR ( SELECT DATEPART(QUARTER,ORDERDATE), COUNT(1) FROM  [ORDERS] WHERE YEAR(ORDERDATE) = @YEAR 
  GROUP BY  DATEPART(QUARTER,ORDERDATE), YEAR(ORDERDATE)
)
		 

OPEN USP_ORDER_QUARTER_CURSOR
FETCH NEXT FROM USP_ORDER_QUARTER_CURSOR INTO @QUARTER ,@ORDERCOUNT
SET @FETCHSTATUS = @@FETCH_STATUS
	IF(@FETCHSTATUS <0)
		BEGIN
		 RAISERROR ( 'NO RECORD FOUND',16,1)
 END
 WHILE @FETCHSTATUS = 0
 BEGIN


 PRINT ' Q - '+ CAST(@QUARTER AS VARCHAR)+', ORDER COUNT : '+ CAST(@ORDERCOUNT AS VARCHAR)+CHAR(10)

 FETCH NEXT FROM USP_ORDER_QUARTER_CURSOR INTO  @QUARTER ,@ORDERCOUNT
	SET @FETCHSTATUS = @@FETCH_STATUS
 END
 CLOSE USP_ORDER_QUARTER_CURSOR
 DEALLOCATE USP_ORDER_QUARTER_CURSOR

END

exec USP_ORDER_QUARTER 1997

--9. TABLE ORDERS AND ORDER DETAILS –OUT PARAMETER
--TAKE YEAR AND MONTH AS PARAMETER AND RETURN
--TOTAL REVENUE GENERATED SUM(UNITPRICE * QTY – DISCOUNT)

ALTER PROC USP_TOTALREVENUE (@YEAR INT,@MONTH INT,@REVENUE NUMERIC(9,2) OUT)
AS
BEGIN
      SELECT @REVENUE= SUM((OD.UNITPRICE*OD.QUANTITY) - ((OD.UNITPRICE*OD.QUANTITY)*OD.DISCOUNT)) FROM [ORDER DETAILS] OD JOIN ORDERS O ON O.ORDERID = OD.ORDERID
       WHERE MONTH(O.ORDERDATE) = @MONTH AND YEAR(O.ORDERDATE) = @YEAR

END


Declare @revenue numeric(9,2)
exec USP_TOTALREVENUE 1996 ,7,@revenue out
select ' TOTAL REVENUE GENERATED  : ' +cast (@revenue as varchar)

--10. FOR EACH EMPLOYEE PRINT EMPLOYEE FULL NAME, BIRTHDATE, HIREDATE, AGE (IN YEARS) AT THE TIME OF HIRING, RETIREMENT DATE. (60 YEARS)
Alter proc USP_EMPDATA
as
begin


DECLARE @FETCHSTATUS INT, @FULLNAME varchar(100), @BIRTHDATE date, @HIREDATE date, @AGE INT, @RETIREMENT DATE

 DECLARE USP_EMPDATA_CURSOR CURSOR FOR ( select concat(TitleOfCourtesy,' ',FirstName,' ',LastName) [FullName] , BirthDate,HireDate,DATEDIFF(year,birthdate,hiredate) AGE, DATEADD(YEAR,60,birthdate)  from Employees)
		 

OPEN USP_EMPDATA_CURSOR 
FETCH NEXT FROM USP_EMPDATA_CURSOR  INTO @FULLNAME, @BIRTHDATE, @HIREDATE , @AGE , @RETIREMENT
SET @FETCHSTATUS = @@FETCH_STATUS
	IF(@FETCHSTATUS <0)
		BEGIN
		 RAISERROR ( 'NO RECORD FOUND',16,1)
    END
 
 WHILE @FETCHSTATUS = 0
    BEGIN
       PRINT '-> '+ Concat( @FULLNAME,' | ', @BIRTHDATE,' | ', @HIREDATE ,' | ', @AGE ,' | ', @RETIREMENT)+CHAR(10)

        FETCH NEXT FROM USP_EMPDATA_CURSOR  INTO  @FULLNAME, @BIRTHDATE, @HIREDATE , @AGE , @RETIREMENT
	      SET @FETCHSTATUS = @@FETCH_STATUS
    END
 CLOSE USP_EMPDATA_CURSOR 
 DEALLOCATE USP_EMPDATA_CURSOR 
END

exec USP_EMPDATA

--FUNCTIONS
--1. TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITPRICE
Create function UF_GetUnitPrice (@PName varchar(30)) returns numeric(9,2)
as 
begin 

return (select top 1 UnitPrice from Products where ProductName = @PName)

end

select dbo.UF_GetUnitPrice('Aniseed Syrup')

--2. TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITSINSTOCK AND UNINTSONORDER

Alter function UF_GetProductStock (@PName varchar(30)) returns Table
return (select top 1 UNITSINSTOCK , UnitsOnOrder From Products where ProductName = @PName)

select * from dbo.UF_GetProductStock('Aniseed Syrup')

--3. TAKE POSTALCODE AS PARAMETER AND RETURN CUSTOMER NAME. IF POSTAL CODE IS NOT VALID DISPLAY ERROR MESSAGE
create function UF_GetCustomerName (@PCode varchar(30)) returns @Table Table (CustomerName varchar(30))
as
begin
      INSERT INTO @TABLE  select ContactName from Customers where PostalCode = @PCode
      if @@ROWCOUNT=0
        begin
            INSERT INTO @TABLE select 'No record found' 
        end
      return 
end

select * from UF_GetCustomerName('1010') --- IF POSTAL CODE IS NOT VALID DISPLAY ERROR MESSAGE

--4. TAKE COUNTRY AS PARAMETER AND RETURN CITY AND POSTALCODE FOR A CUSTOMERS

alter function UF_GetCountrywiseData (@Country varchar(30)) returns @Table Table (City varchar(30),PostalCode varchar(30))
as
begin
    INSERT INTO @TABLE  select CITY,PostalCode from [Customers] where Country = @Country group by city,PostalCode

    if @@ROWCOUNT=0
    begin
        INSERT INTO @TABLE select 'No record found' ,'No record found'
    end
   return 
end

select * from UF_GetCountrywiseData('Mexico')
select * from UF_GetCountrywiseData('')

--5. TAKE EMPLOYEE FIRSTNAME AND LASTNAME AS PARAMETER AND RETURN ALL CUSTOMERS COMPANY NAME, CONTACTNAME, CONTACTTILE
Create function uf_GetEMPDATA (@FNAME varchar(30),@LNAME varchar(30)) returns Table
return (
  select C.CompanyName,c.ContactName,c.ContactTitle from Employees E join  Orders O on E.EmployeeID = O.EmployeeID
  join Customers C on C.CustomerID = O.CustomerID  where E.FirstName=@FNAME and E.LastName=@LNAME
  group by C.CompanyName,c.ContactName,c.ContactTitle
  )

  select * from dbo.uf_GetEMPDATA('Margaret','Peacock')

--6. TAKE YEAR AND EMPLOYEENAME AND DISPLAY AMOUNT OF ORDERS HANDLE BY THE EMPLOYEE IN A YEAR (SUM OF QUANTITY)
create function uf_EmpOrderData (@year int , @Fname varchar(30),@Lname varchar(30)) returns Table
  return ( select count(o.OrderID) [orderCount],sum(isnull(od.Quantity,0)) [orderQuantity] from Employees E join orders o on o.EmployeeID = E.EmployeeID
            join [Order Details] OD on od.OrderID = o.OrderID 
            where Year(O.OrderDate) = @year and  E.FirstName = @Fname and E.LastName  =@LNAme)

select * from uf_EmpOrderData (1996,'Steven','Buchanan')

--7. TAKE YEAR AND MONTH AS PARAMETER AND RETURN NO OF ORDERS SHIPPED IN THE GIVEN MONTH

create function uf_ShippedOrderData (@year int , @month int) returns Table
  return ( select count(o.OrderID) [orderCount]  from  orders o where Year(O.ShippedDate) = @year and  month(o.ShippedDate)=@month)

select * from uf_ShippedOrderData (1996,7)

--8. TAKE PRODUCTNAME AS PARAMTER AND RETURN TOTLA UNITS OF ORDER PLACED FOR THE PRODUCT (SUM(ORDERED QUANTITY)
--Hint: use Products and [Order Details] table

Alter function uf_GetOrderdQuantity(@Pname varchar(40)) returns int
as
begin
  return (select isnull(sum(OD.Quantity),0) from [Order Details] OD join Products P on P.ProductID = od.ProductID where P.ProductName = @Pname)
end

select dbo.uf_GetOrderdQuantity('Chai')
--9. TAKE ORDERID AS PARAMETER AND RETURN TOTAL UNITS OF ORDER PLACE FOR THE ORDERID


Create function uf_GetOrderdUnits(@orderID int) returns int
as
begin
  return (select isnull(sum(OD.Quantity),0) from [Order Details] OD where OD.OrderID = @orderID)
end

select dbo.uf_GetOrderdUnits(10248)

